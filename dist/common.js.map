{"version":3,"sources":["webpack:///./src/app/Interceptor/headerinterceptor.ts","webpack:///./src/app/Interceptor/responceinterceptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAA0C;AAGZ;AAG9B;IAAA;IAaA,CAAC;IAZG,qCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAE9C,IAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC;YAC3B,UAAU,EAAE;gBACR,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO;gBACvC,cAAc,EAAE,kBAAkB;aACrC;SACJ,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC;IAZQ,iBAAiB;QAD7B,gEAAU,EAAE;OACA,iBAAiB,CAa7B;IAAD,wBAAC;CAAA;AAb6B;;;;;;;;;;;;;;;;;;;;;;;;;ACNY;AACgE;AAC7D;AACf;AAG9B;IAAA;IAwBA,CAAC;IAvBG,uCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAE9C,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;aAClB,KAAK,CAAC,CAAC,CAAC;aACR,GAAG,CAAC,cAAI;YACL,EAAE,CAAC,CAAC,IAAI,YAAY,iEAAY,CAAC,CAAC,CAAC;gBAC/B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1B,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC,KAAK,CAAC,aAAG;YACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,GAAG,YAAY,iEAAY,CAAC,CAAC,CAAC;gBAC9B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC;YAED,MAAM,CAAC,0DAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IAEX,CAAC;IAvBQ,mBAAmB;QAD/B,gEAAU,EAAE;OACA,mBAAmB,CAwB/B;IAAD,0BAAC;CAAA;AAxB+B","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core'  \r\nimport { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';  \r\nimport { Observable } from 'rxjs/Observable';  \r\nimport 'rxjs/add/operator/do';  \r\n\r\n@Injectable()  \r\nexport class HeaderInterceptor implements HttpInterceptor {  \r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {  \r\n         \r\n        const dummyrequest = req.clone({  \r\n            setHeaders: {  \r\n                'AuthKey': '12345', 'DeviceID': '85645',  \r\n                'content-type': 'application/json'  \r\n            }  \r\n        })  \r\n        console.log(\"Cloned Request\");   \r\n        console.log(dummyrequest);   \r\n        return next.handle(dummyrequest);  \r\n    }  \r\n}  ","import { Injectable } from '@angular/core'\r\nimport { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n@Injectable()\r\nexport class ResponseInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        console.log(\"Before sending data\")\r\n        console.log(req);\r\n        return next.handle(req)\r\n            .retry(3)\r\n            .map(resp => {\r\n                if (resp instanceof HttpResponse) {\r\n                    console.log('Response is ::');\r\n                    console.log(resp.body)\r\n                }\r\n                return resp;\r\n            }).catch(err => {\r\n                console.log(err);\r\n                if (err instanceof HttpResponse) {\r\n                    console.log(err.status);\r\n                    console.log(err.body);\r\n                }\r\n\r\n                return Observable.of(err);\r\n            });\r\n\r\n    }\r\n}  "],"sourceRoot":""}